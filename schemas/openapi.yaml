openapi: 3.0.0
info:
  version: 1.0.0
  title: Book database API
  description: A simple back-end book database API.
  contact:
    name: Sadat Rahman
    email: rahmans22@uni.coventry.ac.uk
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://presentjoin-enjoyjudge-3000.codio-box.uk/api/v1'
    description: Development server
tags:
  - name: Users
    description: Perform CRUD operations on users.
  - name: Books
    description: Perform CRUD operations on books.
  - name: Authors
    description: Perform CRUD operations on authors.
  - name: Genres
    description: Perform CRUD operations on genres.
  - name: Reviews
    description: Perform CRUD operations on reviews.
paths:
  /users:
    summary: Represents all users
    description: This path represents all users in the system.
    get:
      tags:
        - Users
      description: Get all users.
      responses:
        '200':
          description: View of all users.
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userGetAll
        '404':
          description: No users found.
        '401':
          description: Authentication is required to view all users.
        '403':
          description: Non-admin users cannot view all user records.
    post:
      tags:
        - Users
      description: Create a new user.
      requestBody:
        description: New user data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./user.json#/definitions/user
      responses:
        '201':
          description: User created.
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userCreated
        '400':
          description: User creation failed because of unknown issue.
  /users/{id}:
    summary: Represents an individual user
    description: >
      This path represents an individual user in the system.
      Each user is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of user
    get:
      tags:
        - Users
      description: Get user by ID.
      responses:
        '200':
          description: View of a user.
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userGet
        '404':
          description: User not found.
        '401':
          description: Authentication is required to view a user.
        '403':
          description: Non-admin users can only view their own user record.
    put:
      tags:
        - Users
      description: Update user by ID.
      requestBody:
        description: Updated user data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./user.json#/definitions/userUpdate
      responses:
        '200':
          description: User updated.
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userUpdated
        '404':
          description: User not found.
        '401':
          description: Authentication is required to update a user.
        '403':
          description: Non-admin users can only update their own user record.
        '400':
          description: User update failed because of unknown issue.
    delete:
      tags:
        - Users
      description: Delete user by ID.
      responses:
        '200':
          description: User deleted.
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userDeleted
        '404':
          description: User not found.
        '401':
          description: Authentication is required to delete a user.
        '403':
          description: Non-admin users cannot delete user records.
        '400':
          description: User deletion failed because of unknown issue.
  /users/{id}/reviews:
    summary: Represents all reviews made by an individual user
    description: >
      This path represents all reviews made by an individual user in the system.
      Each user is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of user
    get:
      tags:
        - Users
      description: Get all reviews made by a user.
      responses:
        '200':
          description: View of all reviews.
          content:
            application/json:
              schema:
                $ref: ./review.json#/definitions/reviewGetAll
        '404':
          description: User or reviews not found.
  /books:
    summary: Represents all books
    description: This path represents all books in the system.
    get:
      tags:
        - Books
      description: Get all books.
      responses:
        '200':
          description: View of all books.
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/bookGetAll
        '404':
          description: No books found.
    post:
      tags:
        - Books
      description: Create a new book.
      requestBody:
        description: New book data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./book.json#/definitions/book
      responses:
        '201':
          description: Book created.
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/bookCreated
        '401':
          description: Authentication is required to create a book.
        '403':
          description: Non-admin users cannot create books.
        '400':
          description: Book creation failed because of unknown issue.
  /books/{id}:
    summary: Represents an individual book
    description: >
      This path represents an individual book in the system.
      Each book is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of book
    get:
      tags:
        - Books
      description: Get book by ID.
      responses:
        '200':
          description: View of a book.
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/bookGet
        '404':
          description: Book not found.
    put:
      tags:
        - Books
      description: Update book by ID.
      requestBody:
        description: Updated book data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./book.json#/definitions/bookUpdate
      responses:
        '200':
          description: Book updated.
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/bookUpdated
        '404':
          description: Book not found.
        '401':
          description: Authentication is required to update a book.
        '403':
          description: Non-admin users cannot update books.
        '400':
          description: Book update failed because of unknown issue.
    delete:
      tags:
        - Books
      description: Delete book by ID.
      responses:
        '200':
          description: Book deleted.
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/bookDeleted
        '404':
          description: Book not found.
        '401':
          description: Authentication is required to delete a book.
        '403':
          description: Non-admin users cannot delete books.
        '400':
          description: Book deletion failed because of unknown issue.
  /books/{id}/author:
    summary: Represents the author of an individual book
    description: >
      This path represents the author of an individual book in the system.
      Each book is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of book
    get:
      tags:
        - Books
      description: Get the author that wrote a book.
      responses:
        '200':
          description: View of an author.
          content:
            application/json:
              schema:
                $ref: ./author.json#/definitions/authorGet
        '404':
          description: Book or author not found.
  /books/{id}/reviews:
    summary: Represents all reviews made on an individual book
    description: >
      This path represents all reviews made on an individual book in the system.
      Each user is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of book
    get:
      tags:
        - Books
      description: Get all reviews for a book.
      responses:
        '200':
          description: View of all reviews.
          content:
            application/json:
              schema:
                $ref: ./review.json#/definitions/reviewGetAll
        '404':
          description: Book or reviews not found.
    post:
      tags:
        - Books
      description: Create a new review for a book.
      requestBody:
        description: New review data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./review.json#/definitions/review
      responses:
        '201':
          description: Review created.
          content:
            application/json:
              schema:
                $ref: ./review.json#/definitions/reviewCreated
        '401':
          description: Authentication is required to create a review.
        '403':
          description: Only non-admin users can create reviews.
        '400':
          description: Review creation failed because of unknown issue.
        '404':
          description: Book not found.
  /books/{id}/genres:
    summary: Represents all genres that an individual book belongs to
    description: >
      This path represents all genres an individual book in the system belongs to.
      Each book is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of book
    get:
      tags:
        - Books
      description: Get all genres a book belongs to.
      responses:
        '200':
          description: View of all genres.
          content:
            application/json:
              schema:
                $ref: ./genre.json#/definitions/genreGetAll
        '404':
          description: Book or genres not found.
  /books/{id}/genres/{gid}:
    summary: Represents the relation between an individual book and an individual genre.
    description: >
      This path represents the relation between an individual book and an individual genre in the system.
      Each book is identified by a numeric `id`.
      Each genre is identified by a numeric `gid`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of book
      - in: path
        name: gid
        schema:
          type: integer
        required: true
        description: ID number of genre
    post:
      tags:
        - Books
      description: Add a new genre to a book.
      responses:
        '201':
          description: Genre added to book.
          content:
            application/json:
              schema:
                $ref: ./bookGenre.json#/definitions/genreAdded
        '401':
          description: Authentication is required to add a genre to a book.
        '403':
          description: Non-admin users cannot add genres to books.
        '400':
          description: Adding genre to book failed because of unknown issue.
        '404':
          description: Book or genre not found.
    delete:
      tags:
        - Books
      description: Remove an existing genre from a book.
      responses:
        '201':
          description: Genre removed from book.
          content:
            application/json:
              schema:
                $ref: ./bookGenre.json#/definitions/genreRemoved
        '401':
          description: Authentication is required to remove a genre from a book.
        '403':
          description: Non-admin users cannot remove genres from books.
        '400':
          description: Removing genre from book failed because of unknown issue.
        '404':
          description: Book or genre not found.
  /books/{id}/firstSentence:
    summary: Represents the first sentence of an individual book
    description: >
      This path represents the first sentence of an individual book in the system.
      Each book is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of book
    get:
      tags:
        - Books
      description: Get the first sentence of a book.
      responses:
        '200':
          description: View of the first sentence.
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/getFirstSentence
        '404':
          description: Book or first sentence not found.
  /books/{id}/pageCount:
    summary: Represents the page count of an individual book
    description: >
      This path represents the page count of an individual book in the system.
      Each book is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of book
    get:
      tags:
        - Books
      description: Get the page count of a book.
      responses:
        '200':
          description: View of the page count.
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/getPageCount
        '404':
          description: Book or page count not found.
  /genres:
    summary: Represents all genres
    description: This path represents all genres in the system.
    get:
      tags:
        - Genres
      description: Get all genres.
      responses:
        '200':
          description: View of all genres.
          content:
            application/json:
              schema:
                $ref: ./genre.json#/definitions/genreGetAll
        '404':
          description: No genres found.
    post:
      tags:
        - Genres
      description: Create a new genre.
      requestBody:
        description: New genre data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./genre.json#/definitions/genre
      responses:
        '201':
          description: Genre created.
          content:
            application/json:
              schema:
                $ref: ./genre.json#/definitions/genreCreated
        '401':
          description: Authentication is required to create a genre.
        '403':
          description: Non-admin users cannot create genres.
        '400':
          description: Genre creation failed because of unknown issue.
  /genres/{id}:
    summary: Represents an individual genre
    description: >
      This path represents an individual genre in the system.
      Each genre is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of genre
    get:
      tags:
        - Genres
      description: Get genre by ID.
      responses:
        '200':
          description: View of a genre.
          content:
            application/json:
              schema:
                $ref: ./genre.json#/definitions/genreGet
        '404':
          description: Genre not found.
    put:
      tags:
        - Genres
      description: Update genre by ID.
      requestBody:
        description: Updated genre data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./genre.json#/definitions/genreUpdate
      responses:
        '200':
          description: Genre updated.
          content:
            application/json:
              schema:
                $ref: ./genre.json#/definitions/genreUpdated
        '404':
          description: Genre not found.
        '401':
          description: Authentication is required to update a genre.
        '403':
          description: Non-admin users cannot update genres.
        '400':
          description: Genre update failed because of unknown issue.
    delete:
      tags:
        - Genres
      description: Delete genre by ID.
      responses:
        '200':
          description: Genre deleted.
          content:
            application/json:
              schema:
                $ref: ./genre.json#/definitions/genreDeleted
        '404':
          description: Genre not found.
        '401':
          description: Authentication is required to delete a genre.
        '403':
          description: Non-admin users cannot delete genres.
        '400':
          description: Genre deletion failed because of unknown issue.
  /genres/{id}/books:
    summary: Represents all books that belong to an individual genre.
    description: >
      This path represents all books that belong to an individual genre in the system.
      Each genre is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of genre
    get:
      tags:
        - Genres
      description: Get all books that belong in a genre.
      responses:
        '200':
          description: View of all books.
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/bookGetAll
        '404':
          description: No book or genres found.
  /authors:
    summary: Represents all authors
    description: This path represents all authors in the system.
    get:
      tags:
        - Authors
      description: Get all authors.
      responses:
        '200':
          description: View of all authors.
          content:
            application/json:
              schema:
                $ref: ./author.json#/definitions/authorGetAll
        '404':
          description: No authors found.
    post:
      tags:
        - Authors
      description: Create a new author.
      requestBody:
        description: New author data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./author.json#/definitions/author
      responses:
        '201':
          description: Author created.
          content:
            application/json:
              schema:
                $ref: ./author.json#/definitions/authorCreated
        '401':
          description: Authentication is required to create an author.
        '403':
          description: Non-admin users cannot create authors.
        '400':
          description: Author creation failed because of unknown issue.
  /authors/{id}:
    summary: Represents an individual author
    description: >
      This path represents an individual author in the system.
      Each author is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of author
    get:
      tags:
        - Authors
      description: Get author by ID.
      responses:
        '200':
          description: View of an author.
          content:
            application/json:
              schema:
                $ref: ./author.json#/definitions/authorGet
        '404':
          description: Author not found.
    put:
      tags:
        - Authors
      description: Update author by ID.
      requestBody:
        description: Updated author data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./author.json#/definitions/authorUpdate
      responses:
        '200':
          description: Author updated.
          content:
            application/json:
              schema:
                $ref: ./author.json#/definitions/authorUpdated
        '404':
          description: Author not found.
        '401':
          description: Authentication is required to update an author.
        '403':
          description: Non-admin users cannot update authors.
        '400':
          description: Author update failed because of unknown issue.
    delete:
      tags:
        - Authors
      description: Delete author by ID.
      responses:
        '200':
          description: Author deleted.
          content:
            application/json:
              schema:
                $ref: ./author.json#/definitions/authorDeleted
        '404':
          description: Author not found.
        '401':
          description: Authentication is required to delete an author.
        '403':
          description: Non-admin users cannot delete authors.
        '400':
          description: Author deletion failed because of unknown issue.
  /authors/{id}/books:
    summary: Represents all books written by an individual author
    description: >
      This path represents all books written by an individual author in the system.
      Each author is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of author
    get:
      tags:
        - Authors
      description: Get all books written by an author.
      responses:
        '200':
          description: View of all books.
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/bookGetAll
        '404':
          description: Author or books not found.
  /reviews/{id}:
    summary: Represents an individual review
    description: >
      This path represents an individual review in the system.
      Each review is identified by a numeric `id`.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID number of review
    get:
      tags:
        - Reviews
      description: Get review by ID.
      responses:
        '200':
          description: View of a review.
          content:
            application/json:
              schema:
                $ref: ./review.json#/definitions/reviewGet
        '404':
          description: Review not found.
    put:
      tags:
        - Reviews
      description: Update review by ID.
      requestBody:
        description: Updated review data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./review.json#/definitions/reviewUpdate
      responses:
        '200':
          description: Review updated.
          content:
            application/json:
              schema:
                $ref: ./review.json#/definitions/reviewUpdated
        '404':
          description: Review not found.
        '401':
          description: Authentication is required to update a review.
        '403':
          description: Non-admin users can only update their own reviews.
        '400':
          description: Review update failed because of unknown issue.
    delete:
      tags:
        - Reviews
      description: Delete review by ID.
      responses:
        '200':
          description: Review deleted.
          content:
            application/json:
              schema:
                $ref: ./review.json#/definitions/reviewDeleted
        '404':
          description: Review not found.
        '401':
          description: Authentication is required to delete a review.
        '403':
          description: Non-admin users can only delete their own reviews.
        '400':
          description: Review deletion failed because of unknown issue.